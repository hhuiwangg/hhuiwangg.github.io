<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hhuiwangg.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://hhuiwangg.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-18T07:37:26+00:00</updated><id>https://hhuiwangg.github.io/feed.xml</id><title type="html">blank</title><subtitle>Hui Wang&apos;s research website </subtitle><entry><title type="html">setup coding environment</title><link href="https://hhuiwangg.github.io/blog/2023/setup/" rel="alternate" type="text/html" title="setup coding environment"/><published>2023-11-21T15:09:00+00:00</published><updated>2023-11-21T15:09:00+00:00</updated><id>https://hhuiwangg.github.io/blog/2023/setup</id><content type="html" xml:base="https://hhuiwangg.github.io/blog/2023/setup/"><![CDATA[<p>Install following softwares</p> <ul> <li>Basic <ul> <li>Chrome</li> <li>Spotify</li> <li>Office</li> <li>Photoshop/Premiere</li> </ul> </li> <li>For coding <ul> <li>VS Code</li> <li>Visual Studio</li> <li>Anaconda</li> <li>Git</li> </ul> </li> <li>For reading <ul> <li>Foxit PDF reader</li> <li>obsidian</li> </ul> </li> <li>For meeting <ul> <li>SJTUVPN</li> <li>Slack</li> <li>Teamviewer</li> <li>Zoom</li> <li>Tecent Meeting</li> <li></li> </ul> </li> </ul> <p>Setup some softwares</p> <ul> <li>Cmder <ol> <li>Download and decompress cmder_mini</li> <li>Environment Path: Add cmder path into <code class="language-plaintext highlighter-rouge">environment variable-&gt;system variable-&gt;Path</code></li> <li>Context Menu: Run cmd in administrator mode, enter the dir of <code class="language-plaintext highlighter-rouge">Cmder.exe</code>, run <code class="language-plaintext highlighter-rouge">Cmder.exe /REGISTER ALL</code> to add cmder into right-click context menu</li> <li>User Aliases: Add following rows at the end of <code class="language-plaintext highlighter-rouge">./config/user_aliases.cmd</code> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  l=ls --show-control-chars 
  la=ls -aF --show-control-chars 
  ll=ls -alF --show-control-chars 
  ls=ls --show-control-chars -F
</code></pre></div> </div> </li> <li>Language: Open cmder setting, add following rows at the end of <code class="language-plaintext highlighter-rouge">Startup-&gt;Environment-&gt;Setup environment variables, cmd.exe aliases, codepage</code> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  set LANG=zh_CN.UTF-8
  set LC_ALL=zh_CN.utf8
</code></pre></div> </div> <p>&lt;!–</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div> </div> </li> </ol> </li> </ul> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in this <a href="https://stackoverflow.com/questions/34987908/embed-a-code-block-in-a-list-item-with-proper-indentation-in-kramdown/38090598#38090598">Stackoverflow answer</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">   1.</span> Like this:
      <span class="p">```</span><span class="nl">c
</span>      <span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
      <span class="p">```</span>
<span class="p">
   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li>We can put fenced code blocks inside nested bullets, too. <ol> <li>Like this: <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li>The key is to indent your fenced block in the same line as the first character of the line.</li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>–&gt;</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[How I setup the coding environment in my new laptop]]></summary></entry></feed>